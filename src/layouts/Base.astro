---
interface Props {
  title?: string;
  description?: string;
}
const {
  title = 'WellDrive',
  description = 'WellDrive – Endüstriyel sürücüler',
} = Astro.props;

// Global styles (safe import if present)
try {
  await import("../styles/global.css");
} catch (e) {}
---
<!DOCTYPE html>
<html lang="tr">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="description" content={description} />
    <title>{title}</title>
    <style is:global>
      [data-reveal]{
        opacity:0;
        transform:translateY(14px);
        transition:
          opacity var(--reveal-dur,650ms) cubic-bezier(.22,.61,.36,1),
          transform var(--reveal-dur,650ms) cubic-bezier(.22,.61,.36,1);
        will-change: opacity, transform;
      }
      [data-reveal="fade-right"]{ transform: translateX(-20px); }
      [data-reveal="fade-left"] { transform: translateX( 20px); }
      [data-reveal][data-kind="img"]{ --reveal-dur:550ms; }
      .reveal-in{ opacity:1; transform:none; }
      [data-reveal]{ transition-delay: var(--reveal-delay,0ms); }
      @media (prefers-reduced-motion: reduce){
        [data-reveal]{ opacity:1 !important; transform:none !important; }
      }
    </style>
  </head>
  <body class="min-h-screen bg-white text-black antialiased">
    <slot />
    <script>
      (function(){
        var els = document.querySelectorAll('[data-reveal]');
        if (!els.length) return;
        if (!('IntersectionObserver' in window)){
          els.forEach(function(el){ el.classList.add('reveal-in'); });
          return;
        }
        var io = new IntersectionObserver(function(entries){
          entries.forEach(function(e){
            if (e.isIntersecting){
              var el = e.target;
              if (el.dataset.delay) el.style.setProperty('--reveal-delay', el.dataset.delay+'ms');
              if (el.dataset.dur) el.style.setProperty('--reveal-dur', el.dataset.dur+'ms');
              el.classList.add('reveal-in');
              io.unobserve(el);
            }
          });
        }, { threshold: 0.15, rootMargin: '0px 0px -10% 0px' });
        els.forEach(function(el){ io.observe(el); });
      })();
    </script>
  </body>
</html>